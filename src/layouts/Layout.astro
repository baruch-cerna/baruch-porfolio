---
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Web Developer" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/media/logo_blanco.svg" />
    <title>{title}</title>
    <link
      rel="preload"
      href="/css/general-sans.css"
      as="style"
      onload="this.onload=null;this.rel='stylesheet'"
    />
  </head>
  <body>
    <slot />
    <div id="v-pointer"></div>
    <script type="module">
      import {
        animate,
        inView,
      } from "https://cdn.jsdelivr.net/npm/motion@latest/+esm";
      const quote = `"Una respuesta simple es mÃ¡s elegante."`;
      const quoteElement = document.getElementById("quote");
      const sequence = [
        [".logo-svg", { scale: [0.4, 1] }, { ease: "circInOut", duration: 1 }],
        [
          ".enter",
          { y: [-40, 0] },
          { type: "spring", bounce: 0.5, duration: 1 },
        ],
      ];
      animate(
        "#v-pointer",
        {
          x: [7, 0, 7],
        },
        {
          repeat: Infinity,
          duration: 1,
          ease: "easeInOut",
        }
      );
      animate(sequence);
      inView("#quote", (element) => {
        animate(0, quote.length, {
          duration: 4,
          ease: "easeIn",
          onUpdate: (latest) =>
            (quoteElement.innerHTML = quote.substring(0, latest)),
        });
      });
      inView(".path-list li", (element) => {
        animate(
          element,
          { opacity: 1, y: [-50, 0] },
          {
            duration: 0.9,
            easing: [0.17, 0.55, 0.55, 1],
          }
        );
        return () => animate(element, { opacity: 0, y: [0, -50] });
      });
    </script>
    <script>
      import("../../public/scripts/p5-script").then((m) => m.runSketch());
    </script>
  </body>
</html>
<style is:global>
  *,
  *::before,
  *::after {
    box-sizing: border-box;
    /* cursor: none; */
  }
  :root {
    --accent: 89, 89, 88;
    --accent-light: 242, 242, 233;
    --accent-dark: 1, 13, 0;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      rgb(var(--accent-light)) 30%,
      white 60%
    );
    --font-mono: "Red Hat Mono", monospace;
  }
  * {
    color: rgb(var(--accent-light));
  }
  html {
    font-family: var(--font-mono);
    font-optical-sizing: auto;
    background: rgb(var(--accent-dark));
    scroll-behavior: smooth;
  }
  body {
    position: relative;
    margin: 0;
    overflow-x: hidden;
    min-height: 100vh;
  }

  .logo-svg {
    width: auto;
    height: 100px;
    fill: rgb(var(--accent-light));
  }

  canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }

  h1,
  h2,
  h3,
  p,
  a {
    font-family: "GeneralSans", sans-serif;
  }

  h1,
  h2,
  h3 {
    margin: 0;
    line-height: 1;
  }
  /* 
  h1,
  h2,
  h3,
  p {
    color: rgb(var(--accent-light));
  } */

  p {
    font-weight: 500;
    font-size: 1.25rem;
  }

  h3 {
    font-weight: 700;
    font-size: 2rem;
  }

  #v-pointer {
    display: flex;
    padding: 0.75rem;
    background-color: rgba(var(--accent-light));
    mix-blend-mode: exclusion;
    transform: translate(-50%, -50%);
    border-radius: 50%;
    pointer-events: none;
    position: fixed;
    top: -0.75rem;
    left: -0.75rem;
    z-index: 99999;
    transition: padding 0.3s ease-in-out;
  }

  @media screen and (max-width: 575px) {
    .logo-svg {
      height: 60px;
    }
  }
</style>
