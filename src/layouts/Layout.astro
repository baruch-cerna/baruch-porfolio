---
import Header from "../components/Header.astro";

interface Props {
  title: string;
}
const { title } = Astro.props;
const yoe = new Date().getFullYear() - 2020;
const description = `Desarrollador Web Full Stack con +${yoe} a√±os de experiencia en desarrollo de productos digitales. Experto en Node.js, Django, Angular y React.`;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta
      name="keywords"
      content="Full Stack Developer, Full Stack Web Developer, Node.js, Django, Angular, React, JavaScript, Typescript, Python, MongoDB, PostgreSQL, MySQL, Desarrollo web, Programaci√≥n, Desarrollo de software, SEO, API, Dise√±o de patrones, Arquitectura de software, Liderazgo, M√©xico"
    />
    <meta name="author" content="Baruch Cerna" />
    <meta name="robots" content="index, follow" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="profile" />
    <meta property="og:url" content="https://baruch-cerna.dev" />
    <meta
      property="og:image"
      content="https://baruch-cerna.dev/media/logo_blanco2.jpg"
    />
    <meta property="og:site_name" content="Portafolio de Baruch Cerna" />
    <meta name="viewport" content="width=device-width" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="icon" type="image/svg+xml" href="/media/logo_blanco.svg" />
    <link rel="apple-touch-icon" href="/media/logo_blanco.svg" />
    <title>{title}</title>
  </head>
  <body>
    <Header />
    <slot />
    <footer>
      <p>
        Hecho con ‚ù§Ô∏è y <a href="https://astro.build" target="_blank">Astro</a>
        por
        <a href="https://github.com/baruch-cerna" target="_blank"
          >Baruch Cerna</a
        >
      </p>
    </footer>
    <script>
      import Lenis from "lenis";
      import { animate, inView } from "motion";
      const lenis = new Lenis({
        duration: 1.5,
        easing: (x) => 1 - Math.pow(1 - x, 3),
      });
      function raf(time: number) {
        lenis.raf(time);
        requestAnimationFrame(raf);
      }
      requestAnimationFrame(raf);
      const quote = `Una respuesta simple es m√°s elegante.`;
      const quoteElement = document.getElementById("quote")!;
      const sequenceTime = 2.2;
      const sequence: any[] = [
        [
          ".logo-svg",
          { rotate: [180, 0, -180] },
          { ease: "circInOut", duration: sequenceTime / 2 },
        ],
      ];
      animate(sequence);
      inView("#quote", (element) => {
        animate(0, quote.length, {
          duration: sequenceTime,
          ease: "easeIn",
          onUpdate: (latest) =>
            (quoteElement.innerHTML = `"${quote.substring(0, latest)}"`),
        });
      });
      inView(".path-list li", (element) => {
        animate(
          element,
          { opacity: 1, y: [-50, 0] } as any,
          {
            duration: 0.9,
            easing: [0.17, 0.55, 0.55, 1],
          } as any,
        );
        return () => animate(element, { opacity: 0, y: [0, -50] });
      });
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add("is-visible");
            } else {
              entry.target.classList.remove("is-visible");
            }
          });
        },
        { threshold: 0.2 },
      );

      document.querySelectorAll("[data-animate]").forEach((el) => {
        const classes = el.classList;
        const hasClip = classes
          .values()
          .some((className) => className.includes("clip"));
        if (hasClip) {
          const innerHTML = el.innerHTML;
          el.innerHTML = "";
          const span = document.createElement("span");
          span.innerHTML = innerHTML;
          el.appendChild(span);
        }
        observer.observe(el);
      });
    </script>
  </body>
</html>
<style is:global>
  @import url("https://fonts.googleapis.com/css2?family=Host+Grotesk:wght@300..800&display=swap");
  @import url("https://fonts.googleapis.com/css2?family=Red+Hat+Mono:wght@300..700&display=swap");

  /* ======================================
   üåê DESIGN¬†TOKENS
   ====================================== */
  :root {
    /* ‚Äî¬†Typography ‚Äî */
    --font-sans: "Host Grotesk", sans-serif;
    --font-mono: "Red Hat Mono", monospace;

    /* ‚Äî¬†Palette ‚Äî */
    --color-bg: #1a1a1a;
    --color-text: #fffffe;
    --color-primary: #00f5d4;
    --color-accent: #ff8906;
    --color-muted: #a7a9be;
    --color-danger: #ff5555;
    --color-highlight: #ffe566;

    /* ‚Äî¬†Accent palette for dynamic backgrounds ‚Äî */
    --accent: 89 89 88;
    --accent-light: 242 242 233;
    --accent-dark: 1 13 0;

    /* ‚Äî¬†Sizing ‚Äî */
    --size-xs: 0.5rem;
    --size-sm: 0.75rem;
    --size-md: 1rem;
    --size-lg: 1.5rem;
    --size-xl: 2rem;
    --size-xxl: 3rem;

    /* ‚Äî¬†Spacing ‚Äî */
    --space-xxs: 0.25rem;
    --space-xs: 0.5rem;
    --space-sm: 1rem;
    --space-md: 2rem;
    --space-lg: 4rem;

    /* ‚Äî¬†Radius &¬†Shadow ‚Äî */
    --radius-sm: 6px;
    --radius-md: 12px;
    --radius-lg: 24px;
    --shadow-md: 0 2px 10px rgba(0, 0, 0, 0.2);
    --shadow-lg: 0 4px 20px rgba(0, 0, 0, 0.3);

    /* ‚Äî¬†Shared ‚Äî */
    --easing: cubic-bezier(0.65, 0, 0.35, 1);
    --transition: all 0.3s var(--easing);

    /* ‚Äî¬†Gradients ‚Äî */
    --accent-gradient: linear-gradient(
      45deg,
      rgba(var(--accent), 0.5),
      rgb(var(--accent-dark)) 30%,
      rgba(var(--accent), 0.5) 70%
    );
    --secondary-glow: conic-gradient(
      from 10deg at 50% 50%,
      #d9bea7 0deg,
      #f2dcb3 55deg,
      #223d40 120deg,
      #72878c 160deg,
      transparent 360deg
    );
    --third-glow: conic-gradient(
      from 90deg at 50% 50%,
      #223d40 0deg,
      #72878c 160deg,
      #d9bea7 120deg,
      #f2dcb3 55deg,
      transparent 360deg
    );
  }

  /* ======================================
   üîÑ¬†RESET & GLOBALS
   ====================================== */
  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  html {
    font-family: var(--font-mono);
    background: rgb(var(--accent-dark));
    scroll-behavior: smooth;
    width: 100vw;
    overflow-x: hidden;
  }

  body {
    position: relative;
    margin: 0;
    min-height: 100vh;
    overflow-x: hidden;
    color: var(--color-text);
    font-family: var(--font-sans);
  }

  /* Dynamic background blobs */
  body::before,
  body::after {
    content: "";
    position: absolute;
    z-index: -1;
    width: 100vw;
    height: 60%;
    border-radius: 50%;
    filter: blur(90px);
    opacity: 0.5;
  }

  body::before {
    background: var(--third-glow);
    top: 40%;
    left: 40vw;
    animation: blob-before 8s ease-in-out infinite;
  }

  body::after {
    background: var(--secondary-glow);
    bottom: 50%;
    left: 20vw;
    animation: blob-after 8s ease-in-out infinite;
  }

  @keyframes blob-before {
    0% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-200px) scale(0.8);
    }
    100% {
      transform: translateY(0);
    }
  }

  @keyframes blob-after {
    0% {
      transform: translateX(0);
    }
    50% {
      transform: translateX(-250px) scale(1.2);
    }
    100% {
      transform: translateX(0);
    }
  }

  /* ======================================
   üî§¬†TYPOGRAPHY ‚Äî tag‚Äëbased only
   ====================================== */
  h1,
  h2,
  h3 {
    font-family: var(--font-sans);
    font-weight: 800;
    margin: 0 0 1rem;
    line-height: 1.15;
    color: var(--color-text);
    text-wrap: pretty;
    letter-spacing: 1px;
  }

  h1 {
    font-size: calc(var(--size-xxl) * 2);
  }

  h2 {
    font-size: calc(var(--size-xl) * 2);
  }

  h3 {
    font-size: calc(var(--size-lg) * 2);
  }

  p,
  a,
  label,
  em,
  li {
    font-family: var(--font-sans);
    font-size: calc(var(--size-md) * 2);
    line-height: 1.25;
    font-weight: 400;
    margin: 0;
    color: var(--color-text);
    text-wrap: pretty;
    letter-spacing: 0.3px;
  }

  a {
    text-decoration: none;
  }

  em {
    font-family: var(--font-mono);
    font-style: normal;
  }

  button {
    background: rgba(var(--accent-light), 0.6);
    border: 0;
    border-radius: 0.25rem;
    color: rgb(var(--accent-dark));
    cursor: pointer;
    font-family: var(--font-sans);
    font-size: 2rem;
    padding: 1rem 2rem;
    transition: background-color 0.3s ease-in-out;
  }

  button:hover {
    background: rgb(var(--accent-light));
  }

  input,
  textarea {
    width: 100%;
    background: rgba(var(--accent-dark), 0.6);
    border: 0;
    border-radius: 0.25rem;
    color: rgb(var(--accent-light));
    font-family: var(--font-mono);
    font-size: 1.5rem;
    padding: 1rem 2rem;
    transition: background-color 0.3s ease-in-out;
  }

  input:focus,
  textarea:focus {
    outline: none;
  }

  input:hover,
  textarea:hover {
    background: rgb(var(--accent-dark));
  }

  /* ======================================
   üì¶¬†LAYOUT UTILITIES
   ====================================== */
  .container {
    width: 90%;
    max-width: 1200px;
    margin-inline: auto;
  }

  .flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .grid-2 {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: var(--space-md);
  }

  /* Spacing / radius / shadow helpers */
  .mt-lg {
    margin-top: var(--space-lg);
  }
  .p-md {
    padding: var(--space-md);
  }
  .rounded-md {
    border-radius: var(--radius-md);
  }
  .shadow-md {
    box-shadow: var(--shadow-md);
  }

  /* ======================================
   üéûÔ∏è¬†ANIMATIONS
   ====================================== */
  /* Fade in desde abajo */
  .fade-in-up {
    opacity: 0;
    transform: translateY(40px);
    transition: all 0.8s var(--easing);
  }

  .fade-in-up.is-visible {
    opacity: 1;
    transform: translateY(0);
  }

  /* Desenmascarado tipo clip reveal */
  .clip-reveal {
    overflow: hidden;
    position: relative;
  }

  .clip-reveal > * {
    transform: translateY(100%);
    transition: all 0.8s var(--easing);
    display: inline-block;
  }

  .clip-reveal.is-visible > * {
    transform: translateY(0);
  }

  /* Pulso en borde (√∫til para botones o √≠conos interactivos) */
  .pulse-border {
    position: relative;
  }

  .pulse-border::after {
    content: "";
    position: absolute;
    top: -6px;
    left: -6px;
    right: -6px;
    bottom: -6px;
    border: 2px solid currentColor;
    border-radius: 12px;
    opacity: 0;
    animation: pulse-anim 2s infinite;
  }

  @keyframes pulse-anim {
    0% {
      opacity: 0.6;
      transform: scale(1);
    }
    70% {
      opacity: 0;
      transform: scale(1.3);
    }
    100% {
      opacity: 0;
      transform: scale(1.3);
    }
  }

  .type {
    white-space: nowrap;
    overflow: hidden;
    display: inline-block;
    animation: typewriter 3s steps(40, end);
    border-right: 2px solid var(--color-primary);
  }

  [data-animate] {
    opacity: 0;
  }

  [data-animate].is-visible {
    opacity: 1;
  }

  /* ======================================
   üìö¬†COMPONENTS
   ====================================== */
  .timeline {
    position: relative;
    padding-left: 2rem;
    border-left: 2px solid var(--color-primary);
    animation: fade-in-up 1s ease-out forwards;
  }

  .project-card {
    background: #0f0e17; /* using secondary tone */
    color: var(--color-text);
    border-radius: var(--radius-md);
    padding: var(--space-md);
    box-shadow: var(--shadow-md);
    animation: flip-up 1s ease-in-out;
  }

  .contact-form {
    background: #111;
    padding: var(--space-lg);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-md);
    animation: pulse-border 2.5s infinite;
  }

  /* ======================================
   üñºÔ∏è¬†MEDIA &¬†CANVAS
   ====================================== */
  canvas {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }

  .logo-svg {
    height: 100px;
    fill: rgb(var(--accent-light));
  }

  /* ======================================
   üéõÔ∏è¬†HEADER / FOOTER STRUCTURE
   ====================================== */
  .header,
  footer {
    display: flex;
    width: 100%;
    padding: 2rem;
  }

  footer {
    flex-direction: column;
    justify-content: center;
    align-items: flex-end;
  }

  /* Pointer (custom cursor) */
  #v-pointer {
    position: fixed;
    top: -0.75rem;
    left: -0.75rem;
    padding: 0.75rem;
    background: rgba(var(--accent-light));
    mix-blend-mode: exclusion;
    border-radius: 50%;
    pointer-events: none;
    transform: translate(-50%, -50%);
    z-index: 99999;
    transition: padding 0.3s ease-in-out;
  }

  /* ======================================
   üìê¬†RESPONSIVE TYPOGRAPHY
   ====================================== */
  @media (max-width: 1024px) {
    h1 {
      font-size: calc(var(--size-xxl) * 1.5);
    }
    h2 {
      font-size: calc(var(--size-xl) * 1.5);
    }
    h3 {
      font-size: calc(var(--size-lg) * 1.5);
    }
    p,
    a,
    label,
    em,
    li {
      font-size: calc(var(--size-md) * 1.5);
    }
  }

  @media (max-width: 768px) {
    h1 {
      font-size: calc(var(--size-xxl) * 1.25);
    }
    h2 {
      font-size: calc(var(--size-xl) * 1.25);
    }
    h3 {
      font-size: calc(var(--size-lg) * 1.25);
    }
    p,
    a,
    label,
    em,
    li {
      font-size: calc(var(--size-md) * 1.25);
    }
  }

  @media (max-width: 575px) {
    h1 {
      font-size: calc(var(--size-xxl) * 1.1);
    }
    h2 {
      font-size: calc(var(--size-xl) * 1.1);
    }
    h3 {
      font-size: calc(var(--size-lg) * 1.1);
    }
    p,
    a,
    label,
    em,
    li {
      font-size: calc(var(--size-md) * 1.1);
    }

    button {
      font-size: 1rem;
      padding: 0.5rem 1rem;
    }

    input,
    textarea {
      font-size: 1rem;
      padding: 0.5rem 1rem;
    }
  }
</style>
