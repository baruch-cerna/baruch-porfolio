---
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Web Developer" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <link
      rel="preload"
      href="/css/general-sans.css"
      as="style"
      onload="this.onload=null;this.rel='stylesheet'"
    />
  </head>
  <body>
    <slot />
    <!-- <div id="v-pointer"></div> -->
    <script>
      // import("../../public/scripts/p5-script").then((m) => m.runSketch());
      import("../../public/scripts/ui-animations").then((m) =>
        m.startAnimations()
      );
      const cursor = document.getElementById("v-pointer");
      if (cursor) {
        document.addEventListener("mouseover", (e) => {
          const element = e.target;
          if (element instanceof HTMLImageElement) {
            const p = document.createElement("p");
            p.textContent = "Live view";
            p.style.color = "rgb(var(--accent-dark))";
            p.style.fontSize = "1rem";
            p.style.fontWeight = "700";
            p.style.textAlign = "center";
            p.style.margin = "0";
            p.style.padding = "auto";
            p.style.width = "100%";
            p.style.aspectRatio = "1/1";
            p.style.alignContent = "center";
            cursor.style.padding = "2rem";
            cursor.appendChild(p);
          }
        });
        document.addEventListener("mouseout", (e) => {
          const element = e.target;
          if (element instanceof HTMLImageElement) {
            const isImg = element.parentElement?.classList.contains("card-ref");
            if (isImg) {
              cursor.removeChild(cursor.children[0]);
              cursor.style.padding = "0.75rem";
            }
          }
        });
      }
    </script>
  </body>
</html>
<style is:global>
  *,
  *::before,
  *::after {
    box-sizing: border-box;
    /* cursor: none; */
  }
  :root {
    --accent: 89, 89, 88;
    --accent-light: 242, 242, 233;
    --accent-dark: 1, 13, 0;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      rgb(var(--accent-light)) 30%,
      white 60%
    );
  }
  * {
    color: rgb(var(--accent-light))
  }
  html {
    font-family: "Red Hat Mono", monospace;
    font-optical-sizing: auto;
    background: rgb(var(--accent-light));
    scroll-behavior: smooth;
  }
  body {
    position: relative;
    margin: 0;
    overflow-x: hidden;
    min-height: 100vh;
  }
  canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }

  h1,
  h2,
  h3,
  p {
    font-family: "GeneralSans", sans-serif;
  }

  h1,
  h2,
  h3 {
    margin: 0;
    line-height: 1;
  }
/* 
  h1,
  h2,
  h3,
  p {
    color: rgb(var(--accent-light));
  } */

  p {
    font-weight: 500;
  }

  h3 {
    font-weight: 700;
    font-size: 2rem;
  }

  #v-pointer {
    display: flex;
    padding: 0.75rem;
    background-color: rgba(var(--accent-light));
    mix-blend-mode: exclusion;
    transform: translate(-50%, -50%);
    border-radius: 50%;
    pointer-events: none;
    position: fixed;
    top: -0.75rem;
    left: -0.75rem;
    z-index: 99999;
    transition: padding 0.3s ease-in-out;
  }
</style>
