---
interface Props {
  title: string;
}

const { title } = Astro.props;
const yoe = new Date().getFullYear() - 2020;
const description = `Desarrollador Web Full Stack con +${yoe} años de experiencia en desarrollo de productos digitales. Experto en Node.js, Django, Angular y React.`;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="description"
      content={description}
    />
    <meta
      name="keywords"
      content="Full Stack Developer, Full Stack Web Developer, Node.js, Django, Angular, React, JavaScript, Typescript, Python, MongoDB, PostgreSQL, MySQL, Desarrollo web, Programación, Desarrollo de software, SEO, API, Diseño de patrones, Arquitectura de software, Liderazgo, México"
    />
    <meta name="author" content="Baruch Cerna" />
    <meta name="robots" content="index, follow" />
    <meta name="viewport" content="width=device-width" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="icon" type="image/svg+xml" href="/media/logo_blanco.svg" />
    <title>{title}</title>
    <link
      rel="preload"
      href="/css/general-sans.css"
      as="style"
      onload="this.onload=null;this.rel='stylesheet'"
    />
  </head>
  <body>
    <slot />
    <script>
      import { animate, inView } from "motion";
      const quote = `Una respuesta simple es más elegante.`;
      const quoteElement = document.getElementById("quote")!;
      const sequenceTime = 2.2;
      const sequence: any[] = [
        [
          ".enter",
          { y: [-30, 0] },
          {
            type: "spring",
            bounce: 0.5,
            duration: sequenceTime / 4,
            delay: sequenceTime / 4,
          },
        ],
        [
          ".enter-2",
          { y: [30, 0] },
          { type: "spring", bounce: 0.6, duration: sequenceTime / 4 },
        ],
        [
          ".logo-svg",
          { rotate: [180, 0, -180] },
          { ease: "circInOut", duration: sequenceTime / 2 },
        ],
      ];
      animate(sequence);
      inView("#quote", (element) => {
        animate(0, quote.length, {
          duration: sequenceTime,
          ease: "easeIn",
          onUpdate: (latest) =>
            (quoteElement.innerHTML = `"${quote.substring(0, latest)}"`),
        });
      });
      inView(".path-list li", (element) => {
        animate(
          element,
          { opacity: 1, y: [-50, 0] } as any,
          {
            duration: 0.9,
            easing: [0.17, 0.55, 0.55, 1],
          } as any
        );
        return () => animate(element, { opacity: 0, y: [0, -50] });
      });
    </script>
  </body>
</html>
<style is:global>
  *,
  *::before,
  *::after {
    box-sizing: border-box;
    /* cursor: none; */
  }
  :root {
    --accent: 89, 89, 88;
    --accent-light: 242, 242, 233;
    --accent-dark: 1, 13, 0;
    --accent-gradient: linear-gradient(
      45deg,
      rgba(var(--accent), 0.5),
      rgb(var(--accent-dark)) 30%,
      rgba(var(--accent), 0.5) 70%
    );
    --font-mono: "Red Hat Mono", monospace;
    --secondary-glow: conic-gradient(
      from 10deg at 50% 50%,
      #d9bea7 0deg,
      #f2dcb3 55deg,
      #223d40 120deg,
      #72878c 160deg,
      transparent 360deg
    );

    --third-glow: conic-gradient(
      from 90deg at 50% 50%,
      #223d40 0deg,
      #72878c 160deg,
      #d9bea7 120deg,
      #f2dcb3 55deg,
      transparent 360deg
    );
  }
  * {
    color: rgb(var(--accent-light));
  }
  html {
    font-family: var(--font-mono);
    font-optical-sizing: auto;
    background: rgb(var(--accent-dark));
    scroll-behavior: smooth;
    width: 100vw;
    overflow-x: hidden;
  }
  body {
    position: relative;
    margin: 0;
    overflow-x: hidden;
    min-height: 100vh;
  }

  body::before,
  body::after {
    content: "";
    position: absolute;
    z-index: -1;
    opacity: 0.8;
    overflow-x: hidden;
  }

  body::before {
    background: var(--third-glow);
    border-radius: 50%;
    width: 100vw;
    height: 60%;
    margin-left: -40vw;
    filter: blur(90px);
    top: calc(40%);
    left: calc(40vw);
    opacity: 0.5;
  }

  body::after {
    background: var(--secondary-glow);
    border-radius: 50%;
    width: 100vw;
    height: 60%;
    filter: blur(90px);
    bottom: calc(50%);
    left: 20vw;
    opacity: 0.5;
  }

  body::before {
    /*...previous props*/
    animation: animateBefore 8s ease-in-out infinite;
  }

  body::after {
    /*...previous props*/
    animation: animateAfter 8s ease-in-out infinite;
  }

  @keyframes animateBefore {
    0% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-200px) scale(0.8);
    }
    100% {
      transform: translateY(0);
    }
  }

  @keyframes animateAfter {
    0% {
      transform: translateX(0);
    }
    50% {
      transform: translateX(-250px) scale(1.2);
    }
    100% {
      transform: translateX(0);
    }
  }

  .logo-svg {
    width: auto;
    height: 100px;
    fill: rgb(var(--accent-light));
  }

  canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }

  h1,
  h2,
  h3,
  p,
  a {
    font-family: "GeneralSans", sans-serif;
  }

  h1,
  h2,
  h3 {
    margin: 0;
    line-height: 1;
  }
  /* 
  h1,
  h2,
  h3,
  p {
    color: rgb(var(--accent-light));
  } */

  p {
    font-weight: 500;
    font-size: 1.25rem;
  }

  h3 {
    font-weight: 700;
    font-size: 2rem;
  }

  #v-pointer {
    display: flex;
    padding: 0.75rem;
    background-color: rgba(var(--accent-light));
    mix-blend-mode: exclusion;
    transform: translate(-50%, -50%);
    border-radius: 50%;
    pointer-events: none;
    position: fixed;
    top: -0.75rem;
    left: -0.75rem;
    z-index: 99999;
    transition: padding 0.3s ease-in-out;
  }

  @media screen and (max-width: 575px) {
    .logo-svg {
      height: 60px;
    }
  }
</style>
