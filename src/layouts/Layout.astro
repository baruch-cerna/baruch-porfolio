---
interface Props {
  title: string;
}

const { title } = Astro.props;
import Logo from "/public/media/logo_blanco.svg?raw";
import LinkedIn from "/public/media/linkedin.svg?raw";
import LocationIcon from "../../public/media/location.svg?raw";
import { addAttributesToInnerHTMLString } from "../data/utils";
const locationIcon = addAttributesToInnerHTMLString(LocationIcon, {
  width: "2.5rem",
  height: "3rem",
  fill: "rgb(var(--accent-light))",
});
const logoHTML = addAttributesToInnerHTMLString(Logo, { class: "logo-svg" });
const yoe = new Date().getFullYear() - 2020;
const description = `Desarrollador Web Full Stack con +${yoe} años de experiencia en desarrollo de productos digitales. Experto en Node.js, Django, Angular y React.`;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta
      name="keywords"
      content="Full Stack Developer, Full Stack Web Developer, Node.js, Django, Angular, React, JavaScript, Typescript, Python, MongoDB, PostgreSQL, MySQL, Desarrollo web, Programación, Desarrollo de software, SEO, API, Diseño de patrones, Arquitectura de software, Liderazgo, México"
    />
    <meta name="author" content="Baruch Cerna" />
    <meta name="robots" content="index, follow" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="profile" />
    <meta property="og:url" content="https://baruch-cerna.dev" />
    <meta
      property="og:image"
      content="https://baruch-cerna.dev/media/logo_blanco2.jpg"
    />
    <meta property="og:site_name" content="Portafolio de Baruch Cerna" />
    <meta name="viewport" content="width=device-width" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="icon" type="image/svg+xml" href="/media/logo_blanco.svg" />
    <title>{title}</title>
    <script>
      window.location.href = "https://baruch-cerna.dev";
    </script>
  </head>
  <body>
    <div class="header row">
      <div class="info">
        <p class="location">
          <Fragment set:html={locationIcon} /> Ciudad de México
        </p>
        <a
          href="https://www.linkedin.com/in/alan-baruch/"
          class="logo"
          target="_blank"
          aria-label="Baruch Cerna LinkedIn"
        >
          <Fragment set:html={LinkedIn} />
        </a>
      </div>
      <a href="/" class="logo" aria-label="Baruch Cerna Logo">
        <Fragment set:html={logoHTML} />
      </a>
    </div>
    <slot />
    <footer>
      <p>
        Hecho con ❤️ y <a href="https://astro.build" target="_blank">Astro</a>
        por
        <a href="https://github.com/baruch-cerna" target="_blank"
          >Baruch Cerna</a
        >
      </p>
    </footer>
    <script>
      import { animate, inView } from "motion";
      const quote = `Una respuesta simple es más elegante.`;
      const quoteElement = document.getElementById("quote")!;
      const sequenceTime = 2.2;
      const sequence: any[] = [
        [
          ".enter",
          { y: [-30, 0] },
          {
            type: "spring",
            bounce: 0.5,
            duration: sequenceTime / 4,
            delay: sequenceTime / 4,
          },
        ],
        [
          ".enter-2",
          { y: [30, 0] },
          { type: "spring", bounce: 0.6, duration: sequenceTime / 4 },
        ],
        [
          ".logo-svg",
          { rotate: [180, 0, -180] },
          { ease: "circInOut", duration: sequenceTime / 2 },
        ],
      ];
      animate(sequence);
      inView("#quote", (element) => {
        animate(0, quote.length, {
          duration: sequenceTime,
          ease: "easeIn",
          onUpdate: (latest) =>
            (quoteElement.innerHTML = `"${quote.substring(0, latest)}"`),
        });
      });
      inView(".path-list li", (element) => {
        animate(
          element,
          { opacity: 1, y: [-50, 0] } as any,
          {
            duration: 0.9,
            easing: [0.17, 0.55, 0.55, 1],
          } as any
        );
        return () => animate(element, { opacity: 0, y: [0, -50] });
      });
    </script>
  </body>
</html>
<style is:global>
  *,
  *::before,
  *::after {
    box-sizing: border-box;
    /* cursor: none; */
  }
  :root {
    --accent: 89, 89, 88;
    --accent-light: 242, 242, 233;
    --accent-dark: 1, 13, 0;
    --accent-gradient: linear-gradient(
      45deg,
      rgba(var(--accent), 0.5),
      rgb(var(--accent-dark)) 30%,
      rgba(var(--accent), 0.5) 70%
    );
    --font: "GeneralSans", sans-serif;
    --font-mono: "Red Hat Mono", monospace;
    --secondary-glow: conic-gradient(
      from 10deg at 50% 50%,
      #d9bea7 0deg,
      #f2dcb3 55deg,
      #223d40 120deg,
      #72878c 160deg,
      transparent 360deg
    );

    --third-glow: conic-gradient(
      from 90deg at 50% 50%,
      #223d40 0deg,
      #72878c 160deg,
      #d9bea7 120deg,
      #f2dcb3 55deg,
      transparent 360deg
    );
  }
  * {
    color: rgb(var(--accent-light));
  }
  html {
    font-family: var(--font-mono);
    font-optical-sizing: auto;
    background: rgb(var(--accent-dark));
    scroll-behavior: smooth;
    width: 100vw;
    overflow-x: hidden;
  }
  body {
    position: relative;
    margin: 0;
    overflow-x: hidden;
    min-height: 100vh;
  }

  body::before,
  body::after {
    content: "";
    position: absolute;
    z-index: -1;
    opacity: 0.8;
    overflow-x: hidden;
  }

  body::before {
    background: var(--third-glow);
    border-radius: 50%;
    width: 100vw;
    height: 60%;
    margin-left: -40vw;
    filter: blur(90px);
    top: calc(40%);
    left: calc(40vw);
    opacity: 0.5;
  }

  body::after {
    background: var(--secondary-glow);
    border-radius: 50%;
    width: 100vw;
    height: 60%;
    filter: blur(90px);
    bottom: calc(50%);
    left: 20vw;
    opacity: 0.5;
  }

  body::before {
    /*...previous props*/
    animation: animateBefore 8s ease-in-out infinite;
  }

  body::after {
    /*...previous props*/
    animation: animateAfter 8s ease-in-out infinite;
  }

  @keyframes animateBefore {
    0% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-200px) scale(0.8);
    }
    100% {
      transform: translateY(0);
    }
  }

  @keyframes animateAfter {
    0% {
      transform: translateX(0);
    }
    50% {
      transform: translateX(-250px) scale(1.2);
    }
    100% {
      transform: translateX(0);
    }
  }

  .header {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    height: 100%;
    width: 100%;
    padding: 2rem;
    padding-bottom: 0cap;
  }

  .row {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
  }

  .location {
    display: inline-flex;
    align-items: center;
    margin: 0;
  }

  .logo-svg {
    width: auto;
    height: 100px;
    fill: rgb(var(--accent-light));
  }

  .logo {
    margin: auto 17px;
  }

  canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }

  h1,
  h2,
  h3,
  p,
  a,
  label,
  em {
    font-family: var(--font);
    font-weight: normal;
    margin: 0;
  }

  h1,
  h2,
  h3 {
    font-weight: bold;
    line-height: 1;
    margin-bottom: 1rem;
  }

  p,
  a,
  label,
  em {
    font-size: 2rem;
    line-height: 1.15;
  }

  em {
    font-family: var(--font-mono);
    font-style: normal;
  }

  h1 {
    font-size: 7rem;
    overflow-y: hidden;
  }

  h2 {
    font-size: 6rem;
    font-weight: normal;
  }

  h3 {
    font-size: 3rem;
  }

  button {
    background-color: rgba(var(--accent-light), 0.6);
    border: 0;
    border-radius: 0.25rem;
    color: rgb(var(--accent-dark));
    cursor: pointer;
    font-family: var(--font);
    font-size: 2rem;
    font-weight: normal;
    padding: 1rem 2rem;
    transition: background-color 0.3s ease-in-out;
  }

  button:hover {
    background-color: rgb(var(--accent-light));
  }

  input,
  textarea {
    background-color: rgba(var(--accent-dark), 0.6);
    border: 0;
    border-radius: 0.25rem;
    color: rgb(var(--accent-light));
    font-family: var(--font-mono);
    font-size: 1.5rem;
    font-weight: normal;
    padding: 1rem 2rem;
    transition: background-color 0.3s ease-in-out;
    width: 100%;
  }

  input:focus,
  textarea:focus {
    outline: none;
  }

  input:hover,
  textarea:hover {
    background-color: rgb(var(--accent-dark));
  }

  footer {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-end;
    height: 100%;
    width: 100%;
    padding: 2rem;
  }

  #v-pointer {
    display: flex;
    padding: 0.75rem;
    background-color: rgba(var(--accent-light));
    mix-blend-mode: exclusion;
    transform: translate(-50%, -50%);
    border-radius: 50%;
    pointer-events: none;
    position: fixed;
    top: -0.75rem;
    left: -0.75rem;
    z-index: 99999;
    transition: padding 0.3s ease-in-out;
  }

  @media screen and (max-width: 1024px) {
    h1 {
      font-size: 6rem;
    }

    h2 {
      font-size: 5rem;
    }
    p,
    a,
    label,
    em {
      font-size: 1.75rem;
    }
  }

  @media screen and (max-width: 768px) {
    h1 {
      font-size: 5.5rem;
    }
    h2 {
      font-size: 4.5rem;
    }
    h3 {
      font-size: 2rem;
    }
    p,
    a,
    label,
    em {
      font-size: 1.5rem;
    }
  }

  @media screen and (max-width: 575px) {
    .logo-svg {
      height: 60px;
    }
    h1 {
      font-size: 3rem;
    }
    h2 {
      font-size: 2.5rem;
    }
    h3 {
      font-size: 2rem;
    }
    p,
    a,
    label,
    em {
      font-size: 1.25rem;
    }
    button {
      font-size: 1rem;
      padding: 0.5rem 1rem;
    }

    input,
    textarea {
      font-size: 1rem;
      padding: 0.5rem 1rem;
    }

    .header {
      flex-direction: column-reverse;
    }

    .logo {
      margin: 2rem;
    }
  }
</style>
